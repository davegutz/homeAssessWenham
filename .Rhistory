library(lubridate)
library(readxl)
library(ggplot2)
library(tidyr)
library(effects)
library(dplyr)
library(zoo) # rollmean
# Import Data
mData <- read.csv("all2000_20230127.csv")
mData
mData.Parcel.ID
head(mData)
str(mData)
library(lubridate)
library(readxl)
library(ggplot2)
library(tidyr)
library(effects)
library(dplyr)
library(zoo) # rollmean
# Import Data
#mData <- read.csv("migraine_diary.csv")
mData <- read_excel("migraine_diary.xlsx", sheet = "Migraine")
library(lubridate)
library(readxl)
library(ggplot2)
library(tidyr)
library(effects)
library(dplyr)
library(zoo) # rollmean
# Import Data
#mData <- read.csv("migraine_diary.csv")
mData <- read_excel("migraine_diary.xlsx", sheet = "Migraine")
library(lubridate)
library(readxl)
library(ggplot2)
library(tidyr)
library(effects)
library(dplyr)
library(zoo) # rollmean
# Import Data
#mData <- read.csv("migraine_diary.csv")
mData <- read_excel("migraine_diary.xlsx", sheet = "Migraine")
mData.
View(mData)
mData$migraine <- as.factor(ifelse(is.na(mData$migraine), FALSE, TRUE)) # set migraine to boolean. if blank FALSE, else TRUE (migraine present)
mData$time_asleep <- hour(mData$time_asleep)*60 + minute(mData$time_asleep)
library(lubridate)
library(readxl)
library(ggplot2)
library(tidyr)
library(effects)
library(dplyr)
library(zoo) # rollmean
# Import Data
D <- read.csv("all2000_20230127.csv")
library(lubridate)
library(readxl)
library(ggplot2)
library(tidyr)
library(effects)
library(dplyr)
library(zoo) # rollmean
# Import Data
D <- read.csv("all2000_20230127.csv")
#D <- read_excel("migraine_diary.xlsx", sheet = "Migraine")
head(D)
str(D)
D.type
D$type
D$Type
R <- D[D$Type)==RANCH, ]
R <- D[D$Type==RANCH, ]
R <- D[D$Type=='RANCH', ]
Ra <- D[D$Type=='RANCH', ]
Cp <- D[D$Type=='CAPE', ]
Co <- D[D$Type=='COLONIAL', ]
Sl <- D[D$Type=='SPLIT LEVL', ]
mData$migraine <- as.factor(ifelse(is.na(mData$migraine), FALSE, TRUE)) # set migraine to boolean. if blank FALSE, else TRUE (migraine present)
# Migraine Analysis
# March 30, 2023
# SETUP ####
# load packages
library(lubridate)
library(readxl)
library(ggplot2)
library(tidyr)
library(effects)
library(dplyr)
library(zoo) # rollmean
# Import Data
#mData <- read.csv("migraine_diary.csv")
mData <- read_excel("migraine_diary.xlsx", sheet = "Migraine")
head(mData)
str(mData)
#format variables #####
mData$migraine <- as.factor(ifelse(is.na(mData$migraine), FALSE, TRUE)) # set migraine to boolean. if blank FALSE, else TRUE (migraine present)
mData$time_asleep <- hour(mData$time_asleep)*60 + minute(mData$time_asleep)
mData$severity <- ifelse(is.na(mData$severity), 0, mData$severity)
mData$scent <- ifelse(is.na(mData$scent), FALSE, TRUE)
mData$num_pillsMorning
mData$num_vitamins
mData$period <- ifelse(is.na(mData$period), FALSE, TRUE)
mData$menstrual_phase <- factor(mData$menstrual_phase, levels = c("menses", "week 1", "week 2", "week 3", "week 4", "week 5"))
# make column of Date as number of days elapsed since start (to make numeric)
firstDate <- mData$Date[1]
mData$dateNum = as.numeric(difftime(mData$Date, firstDate, units = "days"))
# drop data that doesn't have date
mData <- mData[!is.na(mData$Date), ]
# make rolling average of values
# avg over past 2 days
mData$nickelAvg2 <- c(NA, rollmean(mData$nickel, 2, na.pad = FALSE, align = c("right")))
mData$timeAsleepAvg2 <- c(NA, rollmean(mData$time_asleep, 2, na.pad = FALSE, align = c("right")))
mData$totalScreenAvg2 <- c(NA, rollmean(mData$total_screen, 2, na.pad = FALSE, align = c("right")))
mData$fiberAvg2 <- c(NA, rollmean(mData$fiber, 2, na.pad = FALSE, align = c("right")))
mData$tyramineAvg2 <- c(NA, rollmean(mData$Tyramine, 2, na.pad = FALSE, align = c("right")))
mData$histamineAvg2 <- c(NA, rollmean(mData$Histamine, 2, na.pad = FALSE, align = c("right")))
mData$histamineSIGHIAvg2 <- c(NA, rollmean(mData$Histamine_SIGHI, 2, na.pad = FALSE, align = c("right")))
# avg over past 3 days
mData$nickelAvg3 <- c(NA, NA, rollmean(mData$nickel, 3, na.pad = FALSE, align = c("right")))
mData$timeAsleepAvg3 <- c(NA, NA, rollmean(mData$time_asleep, 3, na.pad = FALSE, align = c("right")))
mData$totalScreenAvg3 <- c(NA, NA, rollmean(mData$total_screen, 3, na.pad = FALSE, align = c("right")))
mData$fiberAvg3 <- c(NA, NA, rollmean(mData$fiber, 3, na.pad = FALSE, align = c("right")))
mData$tyramineAvg3 <- c(NA, NA, rollmean(mData$Tyramine, 3, na.pad = FALSE, align = c("right")))
mData$histamineAvg3 <- c(NA, NA, rollmean(mData$Histamine, 3, na.pad = FALSE, align = c("right")))
mData$histamineSIGHIAvg3 <- c(NA, NA, rollmean(mData$Histamine_SIGHI, 3, na.pad = FALSE, align = c("right")))
# lag
# 1) make lag
# screen time lad
mData$screenlag1 <- lag(mData$total_screen, n = 1L)
mData$screenlag2 <- lag(mData$total_screen, n = 2L)
mData$screenlag3 <- lag(mData$total_screen, n = 3L)
mData$screenlag4 <- lag(mData$total_screen, n = 4L)
mData$screenlag5 <- lag(mData$total_screen, n = 5L)
# NICKEL Lag
mData$nickellag1 <- lag(mData$nickel, n = 1L)
mData$nickellag2 <- lag(mData$nickel, n = 2L)
mData$nickellag3 <- lag(mData$nickel, n = 3L)
mData$nickellag4 <- lag(mData$nickel, n = 4L)
mData$nickellag5 <- lag(mData$nickel, n = 5L)
# FIBER Lag
mData$fiberlag1 <- lag(mData$fiber, n = 1L)
mData$fiberlag2 <- lag(mData$fiber, n = 2L)
mData$fiberlag3 <- lag(mData$fiber, n = 3L)
mData$fiberlag4 <- lag(mData$fiber, n = 4L)
mData$fiberlag5 <- lag(mData$fiber, n = 5L)
# TYRAMINE Lag
mData$tyraminelag1 <- lag(mData$Tyramine, n = 1L)
mData$tyraminelag2 <- lag(mData$Tyramine, n = 2L)
mData$tyraminelag3 <- lag(mData$Tyramine, n = 3L)
mData$tyraminelag4 <- lag(mData$Tyramine, n = 4L)
mData$tyraminelag5 <- lag(mData$Tyramine, n = 5L)
# Histamine Lag
mData$histaminelag1 <- lag(mData$Histamine, n = 1L)
mData$histaminelag2 <- lag(mData$Histamine, n = 2L)
mData$histaminelag3 <- lag(mData$Histamine, n = 3L)
mData$histaminelag4 <- lag(mData$Histamine, n = 4L)
mData$histaminelag5 <- lag(mData$Histamine, n = 5L)
# Histamine Lag SIGHI
mData$histamineSIGHIlag1 <- lag(mData$Histamine_SIGHI, n = 1L)
mData$histamineSIGHIlag2 <- lag(mData$Histamine_SIGHI, n = 2L)
mData$histamineSIGHIlag3 <- lag(mData$Histamine_SIGHI, n = 3L)
mData$histamineSIGHIlag4 <- lag(mData$Histamine_SIGHI, n = 4L)
mData$histamineSIGHIlag5 <- lag(mData$Histamine_SIGHI, n = 5L)
# PressureChange Lag (minMinusMax from day before)
mData$pressure_minMinusMaxYesterday_lag1 <- lag(mData$pressure_minMinusMaxYesterday, n = 1L)
example("plot")
par
op
plot(D$Fin.area ~ D$Total.Value)
D <- D[!is.na(D$Fin.area), ]
D <- D[!is.na(D$Total.value), ]
Ra <- D[D$Type=='RANCH', ]
Cp <- D[D$Type=='CAPE', ]
Co <- D[D$Type=='COLONIAL', ]
Sl <- D[D$Type=='SPLIT LEVL', ]
plot(D$Fin.area ~ D$Total.Value)
ggplot(data=D, aes(x=Fin.area, y = value, group = measure, color = measure)) +
geom_line()
plot(Fin.area ~ Total.Value, Data=D)
plot(Fin.area ~ Total.Value, data=D)
plot(Fin.area ~ Total.Value, data=D, xlim=[0, 5000])
plot(Fin.area ~ Total.Value, data=D, xlim=(0, 5000))
plot(Fin.area ~ Total.Value, data=D, xmin=0, xmax=5000)
smoothScatter(D$Fin.area ~ D$Total.Value)
smoothScatter(D$Fin.area ~ D$Total.Value, xlim=(0, 5000))
smoothScatter(D$Fin.area ~ D$Total.Value, xlim={0, 5000})
smoothScatter(D$Fin.area ~ D$Total.Value, xlim=[0 5000])
smoothScatter(D$Fin.area ~ D$Total.Value, xlim=0 5000)
smoothScatter(D$Fin.area ~ D$Total.Value, xlim=(0, 5000) )
smoothScatter(D$Fin.area ~ D$Total.Value, xlim(0, 5000) )
D <- read.csv("all2000_20230127.csv")
head(D)
D[!is.na(D$Fin.area), ]
D <- read.csv("all2000_20230127.csv")
D <- D[!is.na(D$Fin.area), ]
D <- D[!is.na(D$Total.value), ]
D <- read.csv("all2000_20230127.csv")
D <- D[!is.na(D$Fin.area), ]
D$Total.Value <- as.numeric(D$Total.Value)
D$Total.Value
D <- read.csv("all2000_20230127.csv")
head(D)
str(D)
# drop na data
D <- D[!is.na(D$Fin.area), ]
D$Total.Value
as.numeric(D$Total.Value)
as.numeric("737,400.00")
class(D$Total.Value)
as.numeric(c("-.1"," 2.7 ","B"))
as.numeric("737,400.00")
as.numeric("737400.00")
D$Total.Value <- replace(D$Total.Value, ',', '')
D$Total.Value <- replace(D$Total.Value, ",", "")
D <- read.csv("all2000_20230127.csv")
head(D)
str(D)
# drop na data
D <- D[!is.na(D$Fin.area), ]
replace(D$Total.Value, ",", "")
replace(D$Total.Value, (","), ("")
)
replace(D$Total.Value, (","), (""))
replace(D$Total.Value, ("$"), (""))
gsub(",", "", D$Total.Value)
gsub("$", "", D$Total.Value)
gsub("\$", "", D$Total.Value)
gsub("$", "", D$Total.Value)
gsub(",", "", D$Total.Value)
D$Total.Value <- gsub(",", "", D$Total.Value)
gsub("$", "", D$Total.Value)
str_replace_all(D$Total.Value, "$", "")
string::str_replace_all(D$Total.Value, "$", "")
stringr::str_replace_all(D$Total.Value, "$", "")
sub(D$Total.Value, "$", "")
sub("$", "", D$Total.Value)
sub("\$", "", D$Total.Value)
sub(\$, "", D$Total.Value)
sub('\$', "", D$Total.Value)
sub('$', "", D$Total.Value)
sub('$', "X", D$Total.Value)
sub('\$', "X", D$Total.Value)
gsub('\$', "X", D$Total.Value)
gsub('$', "X", D$Total.Value)
gsub("[$,]", "", D$Total.Value)
D$Total.Value <- as.numeric(gsub("[$,]", "", D$Total.Value))
plot(Fin.area ~ Total.Value, data=D, xmin=0, xmax=5000)
plot(Fin.area ~ Total.Value, data=D)
smoothScatter(D$Fin.area ~ D$Total.Value, xlim(0, 5000) )
plot(Fin.area ~ Total.Value, data=D)
plot(Fin.area ~ Total.Value, data=D)
gsub("[$,]", "", D$Total.Value)
plot(Fin.area ~ Total.Value, data=D)
plot(Total.Value ~ Fin.area, data=D)
smoothScatter(D$Total.Value ~ D$Fin.area, xlim(0, 5000) )
plot(Total.Value ~ Fin.area, data=D)
plot(Total.Value ~ Fin.area, data=D, xlim(0, 5000))
plot(Total.Value ~ Fin.area, data=D, xlim(0, 5000))
plot(Total.Value ~ Fin.area, data=D, xlim(0, 5000))
D$Fin.area
D$Total.Value
D <- D[!is.na(D$Total.Value), ]
plot(Total.Value ~ Fin.area, data=D, xlim(0, 5000))
plot(Total.Value ~ Fin.area, data=D
plot(Total.Value ~ Fin.area, data=D)
plot(Total.Value ~ Fin.area, data=D)
smoothScatter(D$Total.Value ~ D$Fin.area, xlim(0, 5000) )
D <- read.csv("all2000_20230127.csv")
# drop na data
D$Total.Value <- as.numeric(gsub("[$,]", "", D$Total.Value))
D <- D[!is.na(D$Fin.area), ]
D <- D[!is.na(D$Total.Value), ]
smoothScatter(D$Total.Value ~ D$Fin.area, xlim(0, 5000) )
D$Total.Value
D$Fin.area
D <- read.csv("all2000_20230127.csv")
# drop na data
D$Total.Value <- as.numeric(gsub("[$,]", "", D$Total.Value))
D$Fin.area
D$Total.Value
D[!is.na(D$Fin.area), ]
D[is.na(D$Fin.area), ]
D[is.na(D$Total.Value), ]
D <- read.csv("all2000_20230127.csv")
D$Total.Value <- as.numeric(gsub("[$,]", "", D$Total.Value))
D <- D[!is.na(D$Fin.area), ]
D
D$Fin.area
size(D)
length(D)
D.size
D.size()
D <- read.csv("all2000_20230127.csv")
D$Total.Value <- as.numeric(gsub("[$,]", "", D$Total.Value))
D <- D[!is.na(D$Fin.area), ]
D <- D[!is.na(D$Total.Value), ]
length(D$Total.Value)
length(D$Fin.area)
[D$Fin.area D$Total.Value
[D$Fin.area D$Total.Value]
(D$Fin.area D$Total.Value)
(D$Fin.area, D$Total.Value)
D$Total.Value
D$Fin.area
smoothScatter(D$Total.Value ~ D$Fin.area
smoothScatter(D$Total.Value ~ D$Fin.area)
smoothScatter(D$Total.Value ~ D$Fin.area)
plot(Total.Value ~ Fin.area, data=D)
smoothScatter(D$Total.Value ~ D$Fin.area)
plot(Total.Value ~ Fin.area, data=D)
Ra <- D[D$Type=='RANCH', ]
Cp <- D[D$Type=='CAPE', ]
Co <- D[D$Type=='COLONIAL', ]
Sl <- D[D$Type=='SPLIT LEVL', ]
delete R
delete(R)
del(R)
rem(R)
help(delete)
??delete
??clear
rm(R)
plot(Total.Value ~ Fin.area, data=D)
plot(Total.Value ~ Lot.size, data=D)
Ra <- D[D$Type=='RANCH', ]
Cp <- D[D$Type=='CAPE', ]
Co <- D[D$Type=='COLONIAL', ]
Sl <- D[D$Type=='SPLIT LEVL', ]
plot(Total.Value ~ Fin.area, data=D)
plot(Total.Value ~ Lot.size, data=D)
plot(Total.Value ~ Fin.area, data=D)
plot(Total.Value ~ Lot.size, data=D)
plot(Total.Value ~ Fin.area, data=Ra)
plot(Total.Value ~ Lot.size, data=Ra)
